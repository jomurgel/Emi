@mixin sticky-footer($footer-height, $wrapper-selector: unquote("#wrapper"), $container-selector: unquote("#container"), $footer-selector: unquote("#footer")) {
  html, body {
    height: 100%;
  }
  body {
    margin: 0px;
    padding: 0px;
  }
  #{$wrapper-selector} {
    min-height: 100%;
    height: auto !important;
    height: 100%;
    margin-bottom: -$footer-height;
    #{$container-selector} {
      padding: 0 0 $footer-height 0;
    } 
  }
  #{$footer-selector} {
    height: $footer-height; 
  }
}

// Breakpoints - Uses variables in _base
@mixin breakpoint($point) {
  @if $point == cap {
    @media (min-width: $cap) { @content; } // max width
  }
  @else if $point == m {
    @media (max-width: $m) { @content; } // landscape
  }
  @else if $point == s {
    @media (max-width: $s) { @content; } // portrait
  }
  @else if $point == xs {
    @media (max-width: $xs) { @content; } // mobile
  }   
}

// Clearfix Mini - MINI IS BETTER
@mixin cf() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    & {
	    *zoom: 1; // For IE 6/7 only Include this rule to trigger hasLayout and contain floats.
    }
}

// Propper Inline-block
@mixin inline-block() {
	display: inline-block;
	*display: inline;
	zoom: 1;
}


/************************************************************************
 Borrowed from Bourbon: http://bourbon.io/docs/#html5-input-types

 Generate a variable ($all-text-inputs) with a list of all html5 input types that have a text-based input, excluding textarea.
 http://diveintohtml5.org/forms.html
************************************************************************/
@function assign-inputs($inputs, $pseudo: null) {
  $list : ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}

$inputs-list: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',

              /* Webkit & Gecko may change the display of these in the future */
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';

/* Bare inputs */
$all-text-inputs: assign-inputs($inputs-list);

/* Hover Pseudo-class */
$all-text-inputs-hover: assign-inputs($inputs-list, hover);

/* Focus Pseudo-class */
$all-text-inputs-focus: assign-inputs($inputs-list, focus);


/************************************************************************
 Custom Stash (some helpful tools): https://gist.github.com/jomurgel/a457e491a475e71a4ac3
************************************************************************/

// Remove all Padding/Margins
@mixin cleanslate() {
	margin: 0;
	padding: 0;
}

// Reset when moving from absolute to relative positioning
@mixin resetabsolute() {
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}

// Columns
@mixin columns($count, $gap) {
	-webkit-column-count: $count; /* Chrome, Safari, Opera */
	   -moz-column-count: $count; /* Firefox */
	   		column-count: $count;
	-webkit-column-gap: $gap; /* Chrome, Safari, Opera */
	   -moz-column-gap: $gap; /* Firefox */
	   		column-gap: $gap;
}

// Rotation
@mixin rotate($rot) {
	-webkit-transform: rotate($rot);
	-moz-transform: rotate($rot);
	-o-transform: rotate($rot);
	-ms-transform: rotate($rot);
	transform: rotate($rot);	
}

// Transitions
@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

// Border Radius
@mixin border-radius($radiuspx) {
	-webkit-border-radius: $radiuspx;
	-moz-border-radius: $radiuspx;
	border-radius: $radiuspx;
	background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

	// Single side border-radius
	@mixin border-top-radius($radius) {
	  -webkit-border-top-right-radius: $radius;
	  border-top-right-radius: $radius;
	   -webkit-border-top-left-radius: $radius;
	   border-top-left-radius: $radius;
	   background-clip: padding-box;
	}
	@mixin border-right-radius($radius) {
	  -webkit-border-bottom-right-radius: $radius;
	  border-bottom-right-radius: $radius;
	     -webkit-border-top-right-radius: $radius;
	     border-top-right-radius: $radius;
	     background-clip: padding-box;
	}
	@mixin border-bottom-radius($radius) {
	  -webkit-border-bottom-right-radius: $radius;
	  border-bottom-right-radius: $radius;
	   -webkit-border-bottom-left-radius: $radius;
	   border-bottom-left-radius: $radius;
	   background-clip: padding-box;
	}
	@mixin border-left-radius($radius) {
	  -webkit-border-bottom-left-radius: $radius;
	  border-bottom-left-radius: $radius;
	     -webkit-border-top-left-radius: $radius;
	     border-top-left-radius: $radius;
	     background-clip: padding-box;
	}

// Opacity	
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Retina Images
// background: url(assets/img/gf-nav.jpg) left center no-repeat;
// @include image-2x("assets/img/gf-nav@2x.jpg", 47px, 31px);
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    -webkit-background-size: $width $height;
    	-moz-background-size: $width $height;
			background-size: $width $height;
  }
}